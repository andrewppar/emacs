;; -*-mode: emacs-lisp -*-

(setq *start* (float-time))

(defmacro load! (load-string)
  (declare (indent defun))
  (let ((start (gensym "start")))
    `(let ((,start (float-time)))
       (load ,load-string)
       (message
	(format "done loading %s: %s"
		,load-string (- (float-time) ,start))))))

;; Maybe these should go into 'modules' to be loaded or some other place..
;; Or maybe we have a sysdcl file...
(load! "~/.emacs.d/display.el")
(load! "~/.emacs.d/modules.el")
(load! "~/.emacs.d/splash.el")
(load! "~/.emacs.d/workspace.el")
(load! "~/.emacs.d/project.el")
(load! "~/.emacs.d/proj-dcl.el")
(load! "~/.emacs.d/settings.el")

;;; Custom Helpers
(require 'timesheet-ui)
(require 'tmux)
(require 'spacehammer)
(load! "~/emacs-files/diary-helpers.el")
(load! "~/emacs-files/sql-session.el")
(load! "~/emacs-files/teamspace.el")

;; Custom Theme
(colors!
  :background            "#3B3B3F"
  :foreground            "#D0D0D0"
  :comment               "#8A8A8A"
  :string                "#F5D037"
  :link                  (:foreground "#A2E5C3" :weight 'bold)
  :constant              (:foreground "#F5D037" :weight 'bold)
  :function              (:foreground "#18AED4" :weight 'bold)
  :keyword               (:foreground "#AFD75F" :weight 'bold)
  :type                  (:foreground "#18AED4")
  :font                  (:height 220)
  :transparency          ('alpha 90 80)
  :mode-line             (:foreground "#3B3B3F" :background "#E4E4E4")
  :mode-line-inactive    (:foreground "#3B3B3F" :background "#D0D0D0")
  :prettify-symbols      t
  :fringe                (:background "#d0d0d0"))

(mode-line!

;;     (:text " âš“ ")
;;     (:text (format-time-string "%H:%M ")
;;  	    :color "#C45651")
    (:text " ")
  (:text  (mode-line-workspace))
  (:text " %*%+ ")
  (:text " %m: ")
  (:text "%b ")
  (:text "%o ")
  (:condition
   (not (equal envrc--status 'none))
   :text (format " |envrc %s" envrc--status)
   :color "#30648E")
  (:condition
   (vc-backend buffer-file-name)
   :text (format " |%s " vc-mode)
   :color "#30648E"))

;; Start server
(require 'server)
(when (and (fboundp 'server-running-p)
           (not (server-running-p)))
  (message "starting server...")
  (server-start))


;; Custom Bindings

(defun video-call-with ()
  (interactive)
  (let* ((contacts
	  '(("Brooke" . "https://us06web.zoom.us/j/5142946429?pwd=ZDVTTndHYm9EKzRiSVBycWJ0NC8wdz09")
	    ("Mike" .  "https://us02web.zoom.us/j/6214579943?pwd=aXlJUkM3d1d3SENQbk42aXZUTW9OQT0")))
	 (person (ivy-completing-read "Who would you like to chat with: "
				      (mapcar #'car contacts))))
    (browse-url (alist-get person contacts nil nil #'equal))))

(defun open-browser ()
  "Open important browser tabs."
  (interactive)
  (let ((urls '(("Engine" .
		 "https://github.com/orgs/advthreat/projects/13/views/3"))))
    (mapcar (lambda (binding) (browse-url (cdr binding))) urls)))

(defun messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun scratch-buffer ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun init-file ()
  (interactive)
  (find-file "~/.emacs.d/emacs-init"))

(defun modules-file()
  (interactive)
  (find-file "~/.emacs.d/modules.el"))

(defun core-file ()
  (interactive)
  (find-file "~/.emacs.d/core.el"))

(defun display-file ()
  (interactive)
  (find-file "~/.emacs.d/display.el"))

(defun keyboard-file ()
  (interactive)
  (find-file "~/.emacs.d/keyboard.el"))

(defun to-workspace-1 ()
  (interactive)
  (workspace-to-workspace-number 1))

(defun to-workspace-2 ()
  (interactive)
  (workspace-to-workspace-number 2))

(defun to-workspace-3 ()
  (interactive)
  (workspace-to-workspace-number 3))

(defun to-workspace-4 ()
  (interactive)
  (workspace-to-workspace-number 4))

(defun to-workspace-5 ()
  (interactive)
  (workspace-to-workspace-number 5))

(defun to-workspace-6 ()
  (interactive)
  (workspace-to-workspace-number 6))

(defun restore-organizer-internal (refresh?)
  (org-agenda-list 1)
  (when refresh?
    (refresh-calendar-items-next-week))
  (let ((agenda-buffer (current-buffer)))
    (delete-other-windows)
    (switch-to-buffer agenda-buffer)
    (when refresh?
      (org-agenda-redo))
    (split-window-below)
    (todays-task-log)
    (split-window-right)
    (find-file *status-file*)
    (evil-close-folds )))

(defun restore-organizer ()
  (interactive)
  (restore-organizer-internal t))

(defun restore-organizer-layout ()
  (interactive)
  (restore-organizer-internal nil))

(defun set-up-agenda (start end)
  (interactive "sStart: \nsEnd: ")
  (let ((date (format-time-string "%m-%d-%Y")))
    (timesheet-add! date start end "Cisco" "Set up agenda for the day")))

(defun save-all-buffers ()
  (interactive)
  (save-some-buffers t))

(defun save-all-buffers-kill-no-prompt ()
  (interactive)
  (save-buffers-kill-emacs t))

(which-key-map evil-normal-state-map ","
  :labels
  ( "g"  "git"
    "gt" "git tools"
    "gr" "github review"
    "i"  "init"
    "n"  "notes"
    "o"  "organizer"
    "oe" "edit task"
    "oa" "task action"
    "s"  "s-expression"
    "t"  "tools"
    "tc" "clojure scratch"
    "te" "eirene term"
    "tf" "flyspell"
    "ts" "sql"
    "tt" "tmux"
    "v"  "ivy-view"
    "w"  "workspaces"
    )
  :default-bindings
  (;; buffer
   "ba" 'save-all-buffers
   "bb" 'workspace-switch-buffer
   "bd" 'kill-buffer
   "be" 'treemacs
   "bi" 'ibuffer
   "bm" 'messages-buffer
   "bq" 'save-all-buffers-kill-no-prompt
   "bs" 'save-buffer
   "bt" 'scratch-buffer
   ;; org
   "c"   'org-capture
   ;; magit
   "gb"  'magit-blame
   "gc"  'magit-branch-checkout
   "gh"  'git-timemachine
   "gl"  'magit-log-current
   "gr"  'code-review-pr-select
   "gs"  'magit-status
   "gtp" 'github-visit-pr
   ;; init
   "ic"  'core-file
   "id"  'display-file
   "ii"  'init-file
   "ik"  'keyboard-file
   "im"  'modules-file
   ;; organizer
   "oac" 'add-calendar-item-for-today
   "oas" 'set-up-agenda
   "oed" 'timesheet-edit-description-at-point
   "oee" 'timesheet-edit-end-time-at-point
   "oeg" 'timesheet-edit-group-at-point
   "oes" 'timesheet-edit-start-time-at-point
   "oex" 'timehseet-delete-task-at-point
   "of"  'task-log-for-date
   "og"  'task-log-for-dates
   "ol"  'todays-task-log
   "or"  'refresh-calendar-items-next-week
   "os"  'restore-organizer-layout
   "ot"  'log-task!
   ;;    project tools
   "p"   'project-transient
   ;; s-expressions
   "sh"  'backward-sexp
   "sl"  'forward-sexp
   "sf"  'drag-sexp-forwards
   "sb"  'drag-sexp-backwards
   "sp"  'drag-binding-backwards
   "si"  '(lambda () (interactive) (insert-parentheses 1))
   "sq"  'indent-pp-sexp
   "st"  'transpose-sexps
   ;; tools
   "tcs" 'clojure-start-scratch-repl
   "tcq" 'kill-clojure-repls
   "tee" 'eirene-term
   "teq" 'eirene-term-end-session
   "ttt" 'tmux-close-window-interactively
   "tp"  'project-switch-project
   "td"  'docker
   "tx"  'project-quit-project
   "t+"  'text-scale-increase
   "t-"  'text-scale-decrease
   ;; workspaces
   "w1"  'to-workspace-1
   "w2"  'to-workspace-2
   "w3"  'to-workspace-3
   "w4"  'to-workspace-4
   "w5"  'to-workspace-5
   "w6"  'to-workspace-6
   "wd"  'workspace-pop
   "wj"  'ivy-switch-view
   "wr"  'ivy-push-view
   ;; generic
   "x"  'counsel-M-x))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Scratch and Miscellany

;; TODO
;; Clean this up and put it in a macro
(evil-define-key 'normal 'evil-normal-state-map "'" 'evil-jump-item)
(evil-define-key 'visual 'evil-visual-state-map "'" 'evil-jump-item)

(evil-define-key 'normal 'evil-normal-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'normal 'evil-normal-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'normal 'evil-normal-state-map (kbd "C-c l") 'comint-clear-buffer)

;; Hacks!

(setq *end* (float-time))
(eirene-splash (- *end* *start*))


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(term-color-black ((t (:foreground "#3F3F3F" :background "#2B2B2B"))))
 '(term-color-blue ((t (:foreground "#7CB8BB" :background "#4C7073"))))
 '(term-color-cyan ((t (:foreground "#93E0E3" :background "#8CD0D3"))))
 '(term-color-green ((t (:foreground "#7F9F7F" :background "#9FC59F"))))
 '(term-color-magenta ((t (:foreground "#DC8CC3" :background "#CC9393"))))
 '(term-color-red ((t (:foreground "#AC7373" :background "#8C5353"))))
 '(term-color-white ((t (:foreground "#DCDCCC" :background "#656555"))))
 '(term-color-yellow ((t (:foreground "#DFAF8F" :background "#9FC59F"))))
 '(term-default-bg-color ((t (:inherit term-color-black))))
 '(term-default-fg-color ((t (:inherit term-color-white)))))
(put 'dired-find-alternate-file 'disabled nil)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(json-mode yaml-mode which-key websocket vterm use-package undo-tree ttl-mode sqlformat sparql-mode restclient request quelpa pyvenv proof-general polymode pbcopy org-timeline just-mode ivy-rich hcl-mode git-timemachine flycheck exec-path-from-shell evil-collection envrc dockerfile-mode docker dap-mode crdt counsel company code-review cider anaphora alert ag))
 '(safe-local-variable-values
   '((cider-preferred-build-tool . lein)
     (eval progn
      (put 's/defn 'clojure-doc-string-elt 2)
      (define-clojure-indent
       (puppetlabs\.trapperkeeper\.core/defservice
	'(:defn
	  (:defn)))
       (trapperkeeper/defservice
	'(:defn
	  (:defn)))
       (tk/defservice
	'(:defn
	  (:defn)))
       (defservice
	   '(:defn
	     (:defn)))
       (dotests 2)
       (context 2)
       (tk-test 2)
       (DELETE 2)
       (GET 2)
       (PATCH 2)
       (POST 2)
       (PUT 2)))
     (cljr-favor-prefix-notation)
     (eval progn
      (put 's/defn 'clojure-doc-string-elt 2)
      (define-clojure-indent
       (puppetlabs\.trapperkeeper\.core/defservice
	'(:defn
	  (:defn)))
       (trapperkeeper/defservice
	'(:defn
	  (:defn)))
       (tk/defservice
	'(:defn
	  (:defn)))
       (defservice
	   '(:defn
	     (:defn)))
       (dotests 2)
       (context 2)
       (DELETE 2)
       (GET 2)
       (PATCH 2)
       (POST 2)
       (PUT 2)))
     (eval add-to-list 'auto-mode-alist
      '("\\.clj-template$" . clojure-mode))
     (magit-todos-exclude-globs "*.html" "*.org" "*.md" "*.map"))))

;; -*- mode: emacs-lisp -*-

(setq *start* (float-time))
(setq x-select-enable-clipboard t)

;; TODO: Find a better place for this maybe we need a general settings
;; section
;; (add-hook 'write-file-functions 'delete-trailing-whitespace)

(defmacro load! (load-string)
  (declare (indent defun))
  (let ((start (gensym "start")))
    `(let ((,start (float-time)))
       (load ,load-string)
       (message
	(format "done loading %s: %s"
		,load-string (- (float-time) ,start))))))

(setq user-mail-address  "")

(load! "~/.emacs.d/display.el")
(load! "~/.emacs.d/modules.el")
(load! "~/.emacs.d/splash.el")
(load! "~/.emacs.d/workspace.el")
(load! "~/.emacs.d/project.el")

;; Custom Theme
(colors!
  :background            "#3b3b3f"
  :foreground            "#d0d0d0"
  :comment               "#8a8a8a"
  :string                "#ffc63f"
  :link                  (:foreground "red"     :weight 'bold)
  :constant              (:foreground "#ffc63f" :weight 'bold)
  :function              (:foreground "#18aed4" :weight 'bold)
  :keyword               (:foreground "#AFD75F" :weight 'bold)
  :type                  (:foreground "#18aed4")
  :font                  (:height 230)
  :transparency          ('alpha 90 90)
  :mode-line             (:foreground "#3b3b3f" :background "#d0d0d0")
  :mode-line-inactive    (:foreground "#3b3b3f" :background "#d0d0d0")
  :prettify-symbols      t
  :fringe                (:background "#d0d0d0"))

(mode-line!
  (:text " âš“ ")
  (:text (format-time-string "%H:%M ")
	 :color "#c45651")
  (:text  (mode-line-workspace))
  (:text " %*%+ ")
  (:text " %m: ")
  (:text "%b ")
  (:condition
   (vc-backend buffer-file-name)
   :text (format " |%s " vc-mode)
   :color "#30648e"))

;; Custom Bindings

(defun save-all-buffers ()
  (interactive)
  (save-some-buffers t))

(defun save-all-buffers-kill-no-prompt ()
  (interactive)
  (save-buffers-kill-emacs t))

(defun messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun scratch-buffer ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun init-file ()
  (interactive)
  (find-file "~/.emacs.d/emacs-init"))

(defun modules-file()
  (interactive)
  (find-file "~/.emacs.d/modules.el"))

(defun core-file ()
  (interactive)
  (find-file "~/.emacs.d/core.el"))

(defun display-file ()
  (interactive)
  (find-file "~/.emacs.d/display.el"))

(defun keyboard-file ()
  (interactive)
  (find-file "~/.emacs.d/keyboard.el"))

(defun ivy-push-view-default-name ()
  (let* ((view (ivy--get-view-config))
         (view-name "{} organizer"))
    (when view-name
      (let ((x (assoc view-name ivy-views)))
        (if x
            (setcdr x (list view))
          (push (list view-name view) ivy-views))))))

(defun to-workspace-1 ()
  (interactive)
  (workspace-to-workspace-number 1))

(defun to-workspace-2 ()
  (interactive)
  (workspace-to-workspace-number 2))

(defun to-workspace-3 ()
  (interactive)
  (workspace-to-workspace-number 3))

(defun to-workspace-4 ()
  (interactive)
  (workspace-to-workspace-number 4))

(defun to-workspace-5 ()
  (interactive)
  (workspace-to-workspace-number 5))

(defun to-workspace-6 ()
  (interactive)
  (workspace-to-workspace-number 6))

(which-key-map evil-normal-state-map ","
	       :labels
	       ("i"  "init"
		"t"  "tools"
		"tc" "conda"
		"tp" "project"
		"p"  "projectile"
		"g"  "magit"
		"w"  "workspace"
		"s"  "s-expression"
		"p"  "projectile"
		"v"  "ivy-view"
		)
	       :default-bindings
	       (;; ibuffer
		"bi" 'ibuffer
		"bb" 'workspace-switch-buffer
		"bm" 'messages-buffer
		"bt" 'scratch-buffer
		"ba" 'save-all-buffers
		"bq" 'save-all-buffers-kill-no-prompt
		"bs" 'save-buffer

		;; init
		"ii"  'init-file
		"im"  'modules-file
		"ic"  'core-file
		"id"  'display-file
		"ik"  'keyboard-file
		;; workspaces
                "wd" 'workspace-pop
                "wj" 'ivy-switch-view
		"w1" 'to-workspace-1
		"w2" 'to-workspace-2
		"w3" 'to-workspace-3
		"w4" 'to-workspace-4
		;; magit
		"gs"  'magit-status
		"gc"  'magit-branch-checkout
		"gb"  'magit-blame
		"gl"  'magit-log-current
		;; projectile
		"p"   'projectile-command-map
		;; generic
		"x"  'counsel-M-x
		;; s-expressions
		"sq"  'indent-pp-sexp
		"sl"  'forward-sexp
		"sh"  'backward-sexp
		"st"  'transpose-sexps
		;; tools
		"tp" 'project-switch-project
		"te" 'eshell
		"tm" 'mu4e
		"tca" 'conda-env-activate
		"tcd" 'conda-env-deactivate
		))

;;;;;;;;;;;;
;;; Projects

(defproject emacs
  :project-dir "~/.emacs.d")

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Scratch and Miscellany
;; TODO
;; Clean this up and put it in a macro

;; Like this ???
;;(evil-keys
;; :normal "'" 'evil-jump-item
;; :visual "'" 'evil-jump-item
;; :normal (kbd "C-k") 'comint-previous-input
;; ...)

(evil-define-key 'normal 'evil-normal-state-map "'" 'evil-jump-item)
(evil-define-key 'visual 'evil-visual-state-map "'" 'evil-jump-item)

(evil-define-key 'normal 'evil-normal-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'normal 'evil-normal-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'normal 'evil-normal-state-map (kbd "C-c l") 'comint-clear-buffer)

;; Hacks!
(add-to-list 'exec-path "/usr/local/bin")
(setenv "PATH" (mapconcat 'identity exec-path ":"))

(defun scroll-down-one ()
  (interactive)
  (scroll-down-command 2))

(defun scroll-up-one ()
  (interactive)
  (scroll-up-command 2))

;; Redefine M-n and M-p to scroll like an itty bitty mousewheel
(setq scroll-preserve-screen-position 1)
;;scroll window up/down by one line
(global-set-key (kbd "M-n") 'scroll-up-one)
(global-set-key (kbd "M-p") 'scroll-down-one)

(setq *end* (float-time))
(eirene-splash (- *end* *start*))
(put 'dired-find-alternate-file 'disabled nil)

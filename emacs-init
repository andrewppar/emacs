;; -*- mode: emacs-lisp -*-

(setq *start* (float-time))

(defmacro load! (load-string)
  (declare (indent defun)) (let ((start (gensym "start")))
    `(let ((,start (float-time)))
       (load ,load-string)
       (message
	(format "done loading %s: %s"
		,load-string (- (float-time) ,start))))))



(load! "~/.emacs.d/display.el")
(load! "~/.emacs.d/modules.el")
(load! "~/.emacs.d/splash.el")
(load! "~/.emacs.d/eshell.el")
(load! "~/.emacs.d/workspace.el")

;; Custom Theme

(colors!
 :background "#3b3b3f"
 :foreground "#d0d0d0"
 :comment "#8a8a8a"
 :string "#ffc63f"
 :constant (:foreground "#ffc63f" :weight 'bold)
 :function (:foreground "#18aed4" :weight 'bold)
 :keyword  (:foreground "#AFD75F" :weight 'bold)
 :type     (:foreground "#18aed4")
;; :fringe   (:background nil)
 :transparency ('alpha 90 90)
 )
;; TODO add this to  colors!
(set-face-attribute 'default nil :height 180)

;; Custom Bindings

(defun messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun scratch-buffer ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun init-file ()
  (interactive)
  (find-file "~/.emacs.d/emacs-init"))

(defun modules-file()
  (interactive)
  (find-file "~/.emacs.d/modules.el"))

(defun core-file ()
  (interactive)
  (find-file "~/.emacs.d/core.el"))

(defun display-file ()
  (interactive)
  (find-file "~/.emacs.d/display.el"))

(defun keyboard-file ()
  (interactive)
  (find-file "~/.emacs.d/keyboard.el"))

(defun ivy-push-view-default-name ()
  (let* ((view (ivy--get-view-config))
         (view-name "{} organizer"))
    (when view-name
      (let ((x (assoc view-name ivy-views)))
        (if x
            (setcdr x (list view))
          (push (list view-name view) ivy-views))))))

(defun to-workspace-1 ()
  (interactive)
  (to-workspace-number 1))

(defun to-workspace-2 ()
  (interactive)
  (to-workspace-number 2))

(defun to-workspace-3 ()
  (interactive)
  (to-workspace-number 3))

(which-key-map evil-normal-state-map ","
	       :labels
	       ("i"  "init"
		"g"  "magit"
		"s"  "s-expression"
		"p"  "projectile"
		"v"  "ivy-view"
		"t"  "tools"
		"wx" "workspaces"
		)
	       :default-bindings
	       (;; ibuffer
		"bi" 'ibuffer
		"bb" 'counsel-switch-buffer
		"bm" 'messages-buffer
		"bs" 'scratch-buffer
		;; init
		"ii"  'init-file
		"im"  'modules-file
		"ic"  'core-file
		"id"  'display-file
		"ik"  'keyboard-file
		;; magit
		"gs"  'magit-status
		"gc"  'magit-branch-checkout
		"gb"  'magit-blame
		"gl"  'magit-log-current
		;; projectile
		"p"   'projectile-command-map
		;; generic
	        "x"  'counsel-M-x
	        ;; s-expressions
		"sq"  'indent-pp-sexp
		"sl"  'forward-sexp
		"sh"  'backward-sexp
		"st"  'transpose-sexps
		;; workspaces
		"wx1" 'to-workspace-1
		"wx2" 'to-workspace-2
		"wx3" 'to-workspace-3
		"wxr"  'ivy-push-view
                "wxd"  'ivy-pop-view
                "wxj"  'ivy-switch-view
		;; tools
		"te" 'eshell))

;; TODO
;; Clean this up and put it in a macro
(evil-define-key 'normal 'evil-normal-state-map "[" 'evil-jump-item)
(evil-define-key 'visual 'evil-visual-state-map "[" 'evil-jump-item)

;; Hacks!
(add-to-list 'exec-path "/usr/local/bin")
(setenv "PATH" (mapconcat 'identity exec-path ":"))

(setq *end* (float-time))
(memacs-splash (- *end* *start*)) 
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(magit counsel undo-tree which-key use-package evil))
 '(send-mail-function 'smtpmail-send-it))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'dired-find-alternate-file 'disabled nil)
